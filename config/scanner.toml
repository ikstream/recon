# the default config is always loaded first.
# user-provided configs are loaded next, in the order they are specified on the command line.
# normally, config files are merged:
# globals and service configs (transport/application protocol regex, command, run-once flag)
# defined in a later config overwrite those with the same name from previous configs.
# if you want to completely overwrite previous configs, provide the following in your config:
# merge_strategy = 'overwrite'

[globals]
# variables defined in this group can be used in `command` declarations.
# e.g. command = 'echo "hello {username} from {domain}! your password is {password}" > "{result_file}.log"'

#domain = "example.com"
#username = "user"
#password = "password"

# SERVICES

# well-known port list:
# https://nmap.org/book/nmap-services.html
# /usr/share/nmap/nmap-services

# Nmap Script Engine:
# https://nmap.org/nsedoc/

[[services]]
name = 'amqp'
# https://www.rabbitmq.com/networking.html
application_protocol = 'amqp'

[[services.scans]]
name = 'nmap'
command = 'nmap -Pn -sV -n -p {port} --script="amqp-info" -oN "{result_file}.log" -oX "{result_file}.xml" {address}'

[[services]]
name = 'cassandra'
# https://cassandra.apache.org/
application_protocol = 'apani1'

[[services.scans]]
name = 'nmap'
command = 'nmap -Pn -sV  -p {port} --script="banner,cassandra* and not (brute or broadcast or dos or external or fuzzer)" -oN "{result_file}.log" -oX "{result_file}.xml" {address}'

[[services]]
name = 'cups'
application_protocol = 'ipp'

[[services.scans]]
name = 'nmap'
command = 'nmap -Pn -sV -p {port} --script="banner,cups* and not (brute or broadcast or dos or external or fuzzer)" -oN "{result_file}.log" -oX "{result_file}.xml" {address}'

[[services]]
name = 'distcc'
# https://www.distcc.org/security.html
application_protocol = 'distccd'

[[services.scans]]
name = 'nmap'
command = 'nmap -Pn -sV -p {port} --script="banner,distcc-cve2004-2687" --script-args="distcc-cve2004-2687.cmd=id" -oN "{result_file}.log" -oX "{result_file}.xml" {address}'

[[services]]
name = 'dns'
application_protocol = 'domain(-s)?$'

[[services.scans]]
name = 'nase'
command = '"{PATH_TO_SCANNERS}/nase.py" --port {port} --transport_protocol {transport_protocol} --json "{result_file}.json" {address} 2>&1 | tee "{result_file}.log"'

[[services]]
name = 'finger'
# https://www.rfc-editor.org/info/rfc1288 (section 3.2)
application_protocol = 'finger'

[[services.scans]]
name = 'nmap'
command = 'nmap -Pn -sV -p {port} --script="banner,finger" -oN "{result_file}.log" -oX "{result_file}.xml" {address}'

[[services]]
name = 'ftp'
application_protocol = 'ftps?(-data)?'

[[services.scans]]
name = 'nmap'
command = 'nmap -Pn -v -sV -p {port} --script="banner,ssl-cert,ftp* and not (brute or broadcast or dos or external or fuzzer)" -oN "{result_file}.log" -oX "{result_file}.xml" {address}'

[[services]]
name = 'http'
application_protocol = '^(.+\|)?http'

[[services.scans]]
name = 'nmap'
command = 'nmap $([[ "{transport_protocol}" == "udp" ]] && echo "-sU") -Pn -v -sV -p {port} --script="banner,http* and not (brute or broadcast or dos or external or http-slowloris* or fuzzer)" -oN "{result_file}.log" -oX "{result_file}.xml" {hostname}'

[[services.scans]]
name = 'index'
command = 'curl --silent --insecure --max-time 10 $([[ "{transport_protocol}" == "udp" ]] && echo "--http3") {scheme}://$([[ "{address_type}" == "IPv6" ]] && echo "[{hostname}]" || echo "{hostname}"):{port}/ 2>&1 | tee "{result_file}.html"'

[[services.scans]]
name = 'curl'
command = 'curl --silent --verbose --insecure --show-error --max-time 10 $([[ "{transport_protocol}" == "udp" ]] && echo "--http3") {scheme}://$([[ "{address_type}" == "IPv6" ]] && echo "[{hostname}]" || echo "{hostname}"):{port}/ 2>&1 | tee "{result_file}.log"'

[[services.scans]]
name = 'robots.txt'
command = 'curl --silent --include --insecure --show-error --max-time 10 $([[ "{transport_protocol}" == "udp" ]] && echo "--http3") {scheme}://$([[ "{address_type}" == "IPv6" ]] && echo "[{hostname}]" || echo "{hostname}"):{port}/robots.txt 2>&1 | tee "{result_file}.log"'

[[services.scans]]
name = 'nikto'
transport_protocol = 'tcp'
command = 'nikto -ask no -Cgidirs all -host {hostname} -port {port} -nointeractive -Format json -output "{result_file}.json" 2>&1 | tee "{result_file}.log"'

[[services.scans]]
name = 'whatweb'
transport_protocol = 'tcp'
command = 'whatweb --aggression=3 --no-errors --log-verbose="{result_file}.log" --log-json="{result_file}.json" {scheme}://$([[ "{address_type}" == "IPv6" ]] && echo "[{hostname}]" || echo "{hostname}"):{port}'

[[services]]
name = 'imap'
application_protocol = 'imap(s|(4-ssl))?'

[[services.scans]]
name = 'nmap'
command = 'nmap -Pn -sV -p {port} --script="banner,imap* and not (brute or broadcast or dos or external or fuzzer)" -oN "{result_file}.log" -oX "{result_file}.xml" {address}'

[[services]]
name = 'isakmp'
application_protocol = 'isakmp'

[[services.scans]]
name = 'ike'
command = '"{PATH_TO_SCANNERS}/ike.py" {address} --port {port} | tee "{result_file}.log"'

[[services.scans]]
name = 'nmap'
command = 'nmap -sU -Pn -sV -p {port} --script="banner,ike-version" -oN "{result_file}.log" -oX "{result_file}.xml" {address}'

[[services]]
name = 'kerberos'
application_protocol = 'kerberos|kpasswd'

[[services.scans]]
name = 'nmap'
command = 'nmap $([[ "{transport_protocol}" == "udp" ]] && echo "-sU") -Pn -sV -p {port} --script="banner,krb5-enum-users" -oN "{result_file}.log" -oX "{result_file}.xml" {address}'

[[services]]
name = 'ldap'
application_protocol = 'ldap'

[[services.scans]]
name = 'nmap'
command = 'nmap -Pn -sV -p {port} --script="banner,ldap* and not (brute or broadcast or dos or external or fuzzer)" -oN "{result_file}.log" -oX "{result_file}.xml" {address}'

[[services]]
name = 'mongodb'
application_protocol = 'mongod'

[[services.scans]]
name = 'nmap'
command = 'nmap -Pn -sV -p {port} --script="banner,mongodb* and not (brute or broadcast or dos or external or fuzzer)" -oN "{result_file}.log" -oX "{result_file}.xml" {address}'

[[services]]
name = 'mysql'
application_protocol = 'mysql'

[[services.scans]]
name = 'nmap'
command = 'nmap -Pn -sV -p {port} --script="banner,mysql* and not (brute or broadcast or dos or external or fuzzer)" -oN "{result_file}.log" -oX "{result_file}.xml" {address}'

[[services]]
name = 'nfs'
application_protocol = '^nfs'

[[services.scans]]
name = 'nmap'
command = 'nmap -Pn -sV -p {port} --script="banner,(rpcinfo or nfs*) and not (brute or broadcast or dos or external or fuzzer)" -oN "{result_file}.log" -oX "{result_file}.xml" {address}'

[[services.scans]]
name = 'showmount'
command = 'showmount -e {address} | tee "{result_file}.log"'

[[services]]
name = 'nntp'
application_protocol = '^nntp|snews'

[[services.scans]]
name = 'nmap'
command = 'nmap -Pn -sV -p {port} --script="banner,nntp-ntlm-info" -oN "{result_file}.log" -oX "{result_file}.xml" {address}'

[[services]]
name = 'ntp'
application_protocol = '^ntp'

[[services.scans]]
name = 'nmap'
command = 'nmap $([[ "{transport_protocol}" == "udp" ]] && echo "-sU") -Pn -sV -p {port} --script="banner,ntp-info,ntp-monlist" -oN "{result_file}.log" -oX "{result_file}.xml" {address}'

[[services.scans]]
name = 'ntp'
command = '"{PATH_TO_SCANNERS}/ntp.py" --port {port} --json "{result_file}.json" {address} 2>&1 | tee "{result_file}.log"'

[[services]]
name = 'oracle'
application_protocol = 'oracle'

[[services.scans]]
name = 'nmap'
command = 'nmap -Pn -sV -p {port} --script="banner,oracle* and not (brute or broadcast or dos or external or fuzzer)" -oN "{result_file}.log" -oX "{result_file}.xml" {address}'

[[services]]
name = 'pop3'
application_protocol = 'pop3'

[[services.scans]]
name = 'nmap'
command = 'nmap -Pn -sV -p {port} --script="banner,pop3* and not (brute or broadcast or dos or external or fuzzer)" -oN "{result_file}.log" -oX "{result_file}.xml" {address}'

[[services]]
name = 'rdp'
application_protocol = 'ms-wbt-server'

[[services.scans]]
name = 'nmap'
command = 'nmap $([[ "{transport_protocol}" == "udp" ]] && echo "-sU") -Pn -sV -p {port} --script="banner,rdp* and not (brute or broadcast or dos or external or fuzzer)" -oN "{result_file}.log" -oX "{result_file}.xml" {address}'

[[services]]
name = 'rmi'
application_protocol = 'rmiregistry'

[[services.scans]]
name = 'nmap'
command = 'nmap -Pn -sV -p {port} --script="banner,rmi-vuln-classloader,rmi-dumpregistry" -oN "{result_file}.log" -oX "{result_file}.xml" {address}'

[[services]]
name = 'rpc'
application_protocol = '^erpc|msrpc|rpcbind'

[[services.scans]]
name = 'nmap'
command = 'nmap -Pn -sV -p {port} --script="banner,msrpc-enum,rpc-grind,rpcinfo" -oN "{result_file}.log" -oX "{result_file}.xml" {address}'

[[services.scans]]
name = 'rpcinfo'
command = 'rpcinfo {address} 2>&1 | tee "{result_file}.log"'

[[services.scans]]
name = 'rpcdump'
command = 'impacket-rpcdump -port {port} {address} 2>&1 | tee "{result_file}.log"'

[[services]]
name = 'sip'
application_protocol = '^sip|^ventrilo'

[[services.scans]]
name = 'nmap'
command = 'nmap -Pn -sV -p {port} --script="banner,sip-enum-users,sip-methods" -oN "{result_file}.log" -oX "{result_file}.xml" {address}'

[[services.scans]]
name = 'svmap'
command = 'svmap -p {port} {address} 2>&1 | tee "{result_file}.log"'

[[services]]
name = 'smb'
application_protocol = 'microsoft-ds|netbios|smb'

  # SMB does not support TLS/STARTTLS; only LDAP can use TLS: https://wiki.samba.org/index.php/Configuring_LDAP_over_SSL_(LDAPS)_on_a_Samba_AD_DC

[[services.scans]]
name = 'nmap'
command = 'nmap $([[ "{transport_protocol}" == "udp" ]] && echo "-sU") -Pn -sV -p {port} --script="banner,(nbstat or smb*) and not (brute or broadcast or dos or external or fuzzer)" -oN "{result_file}.log" -oX "{result_file}.xml" {address}'

[[services.scans]]
name = 'smbclient'
command = 'smbclient --list={address} --no-pass --command="recurse ON; ls" 2>&1 | tee "{result_file}.log"'
run_once = true

[[services.scans]]
name = 'enum4linux-ng'
command = 'enum4linux-ng -As -oJ "{result_file}" {address} 2>&1 | tee "{result_file}.log"'
run_once = true

[[services]]
name = 'smtp'
application_protocol = 'smtp'

[[services.scans]]
name = 'nmap'
command = 'nmap -Pn -sV -p {port} --script="banner,smtp* and not (brute or broadcast or dos or external or fuzzer)" -oN "{result_file}.log" -oX "{result_file}.xml" {address}'

[[services.scans]]
name = 'nmap#intrusive'
command = '#nmap -Pn -sV -p {port} --script="banner,smtp* and not (brute or dos or exploit)" -oN "{result_file}.log" -oX "{result_file}.xml" {address}'

[[services]]
name = 'snmp'
application_protocol = 'snmp'

[[services.scans]]
name = 'nmap'
command = 'nmap $([[ "{transport_protocol}" == "udp" ]] && echo "-sU") -Pn -sV -p {port} --script="banner,snmp* and not (brute or broadcast or dos or external or fuzzer)" -oN "{result_file}.log" -oX "{result_file}.xml" {address}'

[[services]]
name = 'ssh'
application_protocol = '^ssh'

[[services.scans]]
name = 'nmap'
command = 'nmap -Pn -sV -p {port} --script="banner,sshv1,ssh2-enum-algos,ssh-hostkey,ssh-auth-methods" -oN "{result_file}.log" -oX "{result_file}.xml" {address}'

[[services]]
name = 'telnet'
application_protocol = '^telnet'

[[services.scans]]
name = 'nmap'
command = 'nmap -Pn -sV -p {port} --script="banner,telnet-encryption,telnet-ntlm-info" -oN "{result_file}.log" -oX "{result_file}.xml" {address}'

[[services]]
name = 'tls'
# services (or service versions) that use TLS by default (i.e. not opportunistic)
application_protocol = '^ssl\||^tls\||https|dicom-tls|domain-s|ftps|imaps|imap4-ssl|ircs(-u)?|ldaps|secure-mqtt|ntske|ms-sql-s|radsec|snews|pop3s|sip-tls|smtps|snmpd?tls|telnets'
# sometimes, Nmap identifies HTTPS as 'http' tunneled through `ssl`.
# the scanner prepends the tunnel info to the application protocol: '<tunnel>|<application protocol>'
# HTTP over TLS (443/tcp)
# DICOM over TLS (2762)
# DNS over TLS/DTLS/QUIC (853/tcp)
# FTP over TLS (990)
# IMAP over TLS (993/585)
# IRC over TLS (994/6697)
# LDAP over TLS (636)
# Message Queuing Telemetry Transport (MQTT) supports TLS (883): https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Network_Connections
# Network Time Security Key Establishment (NTS-KE) uses TLS (4460): https://www.rfc-editor.org/info/rfc8915
# MS-SQL supports TLS (1433)
# RADIUS over TLS (2083): https://www.rfc-editor.org/info/rfc6614
# NNTP over TLS (563)
# POP3 over TLS (995)
# SIP over TLS (5061)
# SMTP over TLS (465)
# SNMP over TLS (10161)
# telnet over TLS (992)

[[services.scans]]
name = 'nmap'
command = 'nmap $([[ "{transport_protocol}" == "udp" ]] && echo "-sU") -Pn -sV -p {port} --script="banner,ssl* and not (brute or broadcast or dos or external or fuzzer)" -oN "{result_file}.log" -oX "{result_file}.xml" {hostname}'

[[services.scans]]
name = 'testssl'
transport_protocol = 'tcp'
command = 'testssl --ip one --nodns min --mapping no-openssl --warnings off --connect-timeout 60 --openssl-timeout 60 --logfile "{result_file}.log" --jsonfile "{result_file}.json" $([[ "{address_type}" == "IPv6" ]] && echo "[{hostname}]" || echo "{hostname}"):{port}'

[[services]]
name = 'tls_misc'
# services that support opportunistic TLS (e.g. STARTTLS) or use TLS in some other form
# https://www.rfc-editor.org/info/rfc7435
application_protocol = 'apani1|ipp|ircu?$|ftp(-data)?|imap|ldap|mongod|ms-wbt-server|mysql|nntp|oracle|pop3|radius$|postgresql|sieve|smtp|vnc|xmpp'
# Cassandra supports TLS: https://cassandra.apache.org/doc/4.1/cassandra/configuration/cass_yaml_file.html#server_encryption_options
# CUPS supports TLS: https://www.cups.org/doc/encryption.html
# IRC supports STARTTLS: https://ircv3.net/specs/deprecated/tls
# FTP supports STARTTLS: https://www.rfc-editor.org/info/rfc4217
# IMAP supports STARTTLS: https://www.rfc-editor.org/info/rfc2595
# LDAP supports STARTTLS: https://www.rfc-editor.org/info/rfc2830
# MongoDB supports TLS: https://www.mongodb.com/docs/v6.0/core/security-transport-encryption/
# RDP supports TLS
# MySQL supports TLS: https://dev.mysql.com/doc/refman/8.0/en/encrypted-connection-protocols-ciphers.html
# NNTP supports STARTTLS: https://www.rfc-editor.org/info/rfc4642
# Oracle DB supports TLS: https://docs.oracle.com/en/database/oracle/oracle-database/19/dbseg/configuring-secure-sockets-layer-authentication.html
# POP3 supports STARTTLS: https://www.rfc-editor.org/info/rfc2595
# RADIUS/1.1 supports TLS: https://datatracker.ietf.org/doc/draft-ietf-radext-radiusv11/11/
# PostgreSQL supports 'SSLRequest': https://www.postgresql.org/docs/current/protocol-flow.html#PROTOCOL-FLOW-SSL
# ManageSieve supports STARTTLS: https://www.rfc-editor.org/info/rfc5804
# SMTP supports STARTTLS: https://www.rfc-editor.org/info/rfc3207
# TigerVNC supports TLS: https://github.com/TigerVNC/tigervnc/wiki/Secure-your-connection
# XMPP supports TLS: https://xmpp.org/extensions/inbox/xtls.html

[[services.scans]]
name = 'nmap'
command = 'nmap $([[ "{transport_protocol}" == "udp" ]] && echo "-sU") -Pn -sV -p {port} --script="banner,ssl* and not (brute or broadcast or dos or external or fuzzer)" -oN "{result_file}.log" -oX "{result_file}.xml" {address}'

[[services.scans]]
name = 'testssl'
# https://github.com/testssl/testssl.sh/wiki/Man-page
transport_protocol = 'tcp'
application_protocol = 'ftp|smtp|pop3|imap|xmpp|telnet|ldap|postgresql|mysql'
command = 'testssl --ip one --nodns min --mapping no-openssl --warnings off --connect-timeout 60 --openssl-timeout 60 --starttls "$(echo "{application_protocol}" | sed "s:postgresql:postgres:")" --logfile "{result_file}.log" --jsonfile "{result_file}.json" $([[ "{address_type}" == "IPv6" ]] && echo "[{address}]" || echo "{address}"):{port}'

[[services]]
name = 'vnc'
application_protocol = 'vnc'

[[services.scans]]
name = 'nmap'
command = 'nmap -Pn -sV -p {port} --script="banner,(vnc* or realvnc*) and not (brute or broadcast or dos or external or fuzzer)" --script-args="unsafe=1" -oN "{result_file}.log" -oX "{result_file}.xml" {address}'

[[services]]
name = 'xmpp'
application_protocol = 'xmpp'

[[services.scans]]
name = 'nmap'
command = 'nmap -Pn -sV -p {port} --script="banner,xmpp* and not (brute or broadcast or dos or external or fuzzer)" -oN "{result_file}.log" -oX "{result_file}.xml" {address}'
